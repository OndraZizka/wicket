<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="wicket-components">
   <title>Seam for Apache Wicket Features</title>
   <para>
    Seam's integration with Wicket is focused on two tasks: conversation propagation through wicket page metadata and contextual injection of
    wicket components.
   </para>

  <section id="injection">
  <title>Injection</title>
   <para>
    Any object that extends org.apache.wicket.Component or one of its subclasses is eligible for injection with CDI beans.  This is accomplished
     by annotating fields of the component with the @javax.inject.Inject annotation:
   </para>

      <programlisting role="java"><![CDATA[public class MyPage extends WebPage { 
     @Inject SomeDependency dependency;
     
     public MyPage() 
     {
         depedency.doSomeWork();
     }]]></programlisting>
   <para>
      Note that since Wicket components must be serializable, any non-transient field of a wicket component must be serializable.  In the case of 
    injected dependencies, the injected object itself will be serializable if the scope of the dependency is not @Dependent, because the object 
    injected will be a serializable proxy, as required by the CDI specification.  For injections of non-serializable @Dependent objects, 
      the field should be marked transient and the injection should be looked up again in a component-specific attach() override, using the BeanManager
      API.
   </para>
   <para>
    Upon startup, Weld will examine your component classes to ensure that the injections you use are resolvable and unambiguous, as per the CDI specification.
      If any injections fail this check, your application will fail to bootstrap.
   </para>

   <para> The scopes available are similar to those in a JSF application, as descibed in the CDI reference.  The container, in an JavaEE environment, or the   
    servlet listeners, in a servlet environment, will set up the application, session, and request scopes.  The conversation scope is set up by the 
    SeamWebRequestCycle as outlined in the next two sections.   </para>
  </section>

   <section id="conversationControl">
      <title>Conversation Control</title>
      <para>
         Application conversation control is accomplished as per the CDI specification.  By default, like JSF/CDI, each wicket http request (whether ajax or not) 
      has a transient conversation, which is destroyed at the end of the request.   A conversation is marked long running by injecting the 
        javax.enterprise.context.Conversation bean and calling its begin method. 
      </para>
         
      <programlisting role="java"><![CDATA[public class MyPage extends WebPage { 
     @Inject Conversation conversation;
     
     public MyPage() 
     {
         conversation.begin();
         //set up components here
     }]]></programlisting>

      <para>Similarly, a conversation is ended with the Conversation bean's end() method.</para>
   </section>

   <section id="conversationPropagation">
      <title>Conversation Propagation</title>
      <para>
    A transient conversation is created when the first wicket IRequestTarget is set during a request.  If the request
     target is an IPageRequestTarget for a page which has previously marked a conversation as non-transient, or if the "cid" parameter is present in the 
      request, the specified conversation will be activated.  If the conversation is missing (i.e. has timed out and been destroyed), 
    SeamRequestCycle.handleMissingConversation() will be invoked.  By default this does nothing, and your conversation will be new and transient.  You 
    can however override this, for example to throw a PageExpiredException or something similar.  Upon the end of a response, SeamRequestCycleProcessor will
    store the cid of a long running conversation, if one exists, to the current page's metadata map, if there is a current page.  The key for the cid in 
    the metadata map is the singleton SeamMetaData.CID.  Finally, uppon detach(), the SeamRequestCycle will invalidate and deactive the conversation context.
     </para>

    <para>
     Note that the above process indicates that after a conversation is marked long-running by a page, requests back to that page (whether ajax or not) will 
     activate that conversation. It also means that new Pages set as RequestTargets, if created directly with setResponsePage(somePageInstance) or with 
     setResponsePage(SomePage.class,pageParameters), will have the conversation propagated to them.  This can be avoided by (a) ending the 
     conversation before the call to setResponsePage, (b) using a BookmarkablePageLink rather than directly instantiating the response page, or (c) 
     specifying an empty "cid" parameter in PageParameters when using setResponsePage.  (Note that the final case also provides a mechanism for switching 
     conversations: if a cid is specified in PageParameters, it will be used by bookmarkable pages, rather than the current conversation.)
      </para>
   </section>

</chapter>
